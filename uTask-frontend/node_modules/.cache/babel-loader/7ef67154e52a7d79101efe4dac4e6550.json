{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\Web Development\\\\todo-aplicacao\\\\uTask-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport api from './services/api'; // Axios\n// Imagens ---\n\nimport beach from \"./assets/beach.png\"; // -----------\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]); // Tasks não feitas\n\n  const [tasksDone, setTasksDone] = useState([]); // Tasks feitas\n\n  const [tarefa_input, setTarefa_input] = useState(''); // Inputs no form\n\n  useEffect(() => {\n    // Mostra as tasks\n    async function loadTasks() {\n      function equalsTrue(entry) {\n        return entry.done === true;\n      }\n\n      function equalsFalse(entry) {\n        return entry.done === false;\n      }\n\n      const response = await api.get(\"/items/read\");\n      setTasks(response.data.filter(equalsTrue));\n      setTasksDone(response.data.filter(equalsFalse));\n    }\n\n    loadTasks();\n  }, []);\n\n  async function handleSubmit(e) {\n    // Criar nova task\n    e.preventDefault();\n    const response = await api.post(\"/items/create\", {\n      \"content\": tarefa_input,\n      \"done\": true\n    });\n    setTarefa_input(\"\");\n    setTasks([...tasks, response.data]);\n  }\n\n  async function handleDelete(id) {\n    // Deleta uma task (done ou não)\n    function taskRemoval(array) {\n      return array._id !== id;\n    }\n\n    await api.delete(\"/items/delete\", {\n      data: {\n        \"id\": id\n      }\n    });\n    setTasks(tasks.filter(taskRemoval));\n    setTasksDone(tasksDone.filter(taskRemoval));\n  }\n\n  async function handleChange(id) {\n    // funcionalidades que podem ser implementadas\n    const newContent = false; // Mudança de texto\n\n    const newDone = false; // Usuário colocar a task devolta no TODO\n\n    await api.put(\"/items/update\", {\n      \"id\": id\n    });\n  }\n\n  const praiaNada =\n  /*#__PURE__*/\n  // Quando não tem tasks\n  _jsxDEV(\"div\", {\n    id: \"nada\",\n    className: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: beach,\n      alt: \"Foto de uma praia\",\n      className: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nada por aqui!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"sectionTop\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"center\",\n        children: \"uTask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"center\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true,\n          placeholder: \"Add uma nova tarefa\",\n          alt: \"Add uma nova tarefa\",\n          pattern: \".{1,48}\",\n          title: \"Entrada deve ter no m\\xE1ximo 48 caracteres\",\n          value: tarefa_input,\n          onChange: e => setTarefa_input(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"sectionMiddle\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"center\",\n        children: \"TODO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"div-meio\",\n        children: [tasks.length > 0 && tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center task\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskLeft\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: task.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskRight\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"taskGreen\",\n              alt: \"Marcar como conclu\\xEDda\",\n              title: \"Marcar como conclu\\xEDda\",\n              type: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"taskRed\",\n              alt: \"Deletar tarefa\",\n              title: \"Deletar tarefa\",\n              type: \"button\",\n              value: task._id,\n              onClick: e => handleDelete(e.currentTarget.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this)]\n        }, task._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)), tasks.length === 0 && praiaNada]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"sectionBottom\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"center\",\n        children: \"DONE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"div-rodape\",\n        children: [tasksDone.length > 0 && tasksDone.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center task taskD\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskLeft\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"s\", {\n                children: task.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskRight\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              alt: \"Deletar tarefa\",\n              title: \"Deletar tarefa\",\n              type: \"button\",\n              value: task._id,\n              onClick: e => handleDelete(e.currentTarget.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }, this)]\n        }, task._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this)), tasksDone.length === 0 && praiaNada]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"1dhv4EDWpZUOV99Rxl+MEzbnXEg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Usuario/Documents/Web Development/todo-aplicacao/uTask-frontend/src/App.js"],"names":["React","useState","useEffect","api","beach","App","tasks","setTasks","tasksDone","setTasksDone","tarefa_input","setTarefa_input","loadTasks","equalsTrue","entry","done","equalsFalse","response","get","data","filter","handleSubmit","e","preventDefault","post","handleDelete","id","taskRemoval","array","_id","delete","handleChange","newContent","newDone","put","praiaNada","target","value","length","map","task","content","currentTarget"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'; \nimport api from './services/api'; // Axios\n\n// Imagens ---\nimport beach from \"./assets/beach.png\";\n// -----------\n\nfunction App() {\n\n    const [tasks, setTasks] = useState([]);         // Tasks não feitas\n    const [tasksDone, setTasksDone] = useState([]); // Tasks feitas\n\n    const [tarefa_input , setTarefa_input] = useState(''); // Inputs no form\n\n    useEffect(() => {   // Mostra as tasks\n        async function loadTasks() {\n            function equalsTrue(entry){\n                return entry.done === true; \n            }\n\n            function equalsFalse(entry){\n                return entry.done === false;\n            }\n\n            const response = await api.get(\"/items/read\");\n        \n            setTasks((response.data).filter(equalsTrue));\n            setTasksDone((response.data).filter(equalsFalse));\n        }\n\n        loadTasks();\n    }, []);\n\n    async function handleSubmit(e){ // Criar nova task\n        e.preventDefault();\n\n        const response = await api.post(\"/items/create\", \n        {\n            \"content\": tarefa_input,\n            \"done\": true\n        })\n\n        setTarefa_input(\"\");\n\n        setTasks([...tasks, response.data]);\n    }\n\n    async function handleDelete(id){ // Deleta uma task (done ou não)\n        function taskRemoval(array){\n            return array._id !== id;\n        }\n\n\n        await api.delete(\"/items/delete\", \n        { \n            data: {\"id\": id} \n        })\n\n        setTasks(tasks.filter(taskRemoval));\n        setTasksDone(tasksDone.filter(taskRemoval));\n        \n    }\n\n    async function handleChange(id){\n\n        // funcionalidades que podem ser implementadas\n        const newContent = false; // Mudança de texto\n        const newDone = false;    // Usuário colocar a task devolta no TODO\n\n        await api.put(\"/items/update\", {\n            \"id\": id\n        })\n    }\n\n    const praiaNada =\n        // Quando não tem tasks\n        <div id=\"nada\" className=\"center\" >\n            <img src={beach} alt=\"Foto de uma praia\" className=\"\" ></img>\n            <p>Nada por aqui!</p>\n        </div>;\n\n    return ( \n        <div>\n            <section id=\"sectionTop\">\n                <h1 className=\"center\">uTask</h1>\n\n                <form className=\"center\" onSubmit={handleSubmit} >\n                    <input \n                    type=\"text\"\n                    required \n                    placeholder=\"Add uma nova tarefa\"\n                    alt=\"Add uma nova tarefa\"\n                    pattern=\".{1,48}\"\n                    title=\"Entrada deve ter no máximo 48 caracteres\"\n                    value={tarefa_input}\n                    onChange={e => setTarefa_input(e.target.value)} >\n                    </input>\n                    <button type=\"submit\" ></button>\n                </form>\n\n            </section>\n\n            <section id=\"sectionMiddle\" >\n                <hr></hr>\n\n                <h2 className=\"center\" >TODO</h2>\n\n                <div id=\"div-meio\" >\n                    {tasks.length > 0 && tasks.map(task => (\n                        <div key={task._id} className=\"center task\" >\n                            <div className=\"taskLeft\" >\n                                <p>{task.content}</p>\n                            </div>\n        \n                            <div className=\"taskRight\" >\n                                <button className=\"taskGreen\" \n                                alt=\"Marcar como concluída\" \n                                title=\"Marcar como concluída\"\n                                type=\"submit\" >\n                                </button>\n\n                                <button\n                                className=\"taskRed\" \n                                alt=\"Deletar tarefa\" \n                                title=\"Deletar tarefa\"\n                                type=\"button\"\n                                value={task._id}\n                                onClick={e => handleDelete(e.currentTarget.value)} >\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n\n                    {tasks.length === 0 && praiaNada }\n                </div>\n            </section>\n\n            <section id=\"sectionBottom\" >\n                <hr></hr>\n\n                <h2 className=\"center\" >DONE</h2>\n\n                <div id=\"div-rodape\" >\n                    {tasksDone.length > 0 && tasksDone.map(task => (\n                        <div key={task._id} className=\"center task taskD\" >\n                            <div className=\"taskLeft\" >\n                                <p><s>{task.content}</s></p>\n                            </div>\n        \n                            <div className=\"taskRight\" >\n                                <button\n                                alt=\"Deletar tarefa\" \n                                title=\"Deletar tarefa\"\n                                type=\"button\"\n                                value={task._id}\n                                onClick={e => handleDelete(e.currentTarget.value)} >\n                                </button>\n                            </div>\n                        </div>\n                    ))}\n\n                    {tasksDone.length === 0 && praiaNada }\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}